name: esg_mate

services:
  gateway:
    build:
      context: ./gateway
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    volumes:
      - ./gateway/app:/app/app
      - ./gateway/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8080
      - PYTHONUNBUFFERED=1
    restart: always
    depends_on:
      - auth-service
      - chatbot-service
      - gri-service
      - materiality-service
      - tcfd-service
      - grireport-service
      - tcfdreport-service
      - survey-service
      - redis
    dns:
      - 8.8.8.8
      - 8.8.4.4
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/api/v1/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  auth-service:
    build:
      context: ./service/auth-service
      dockerfile: Dockerfile
    ports:
      - "8008:8008"
    volumes:
      - ./service/auth-service/app:/app/app
      - ./service/auth-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8008
      - PYTHONUNBUFFERED=1
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/auth_db
    restart: always
    depends_on:
      - postgres
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8008/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  chatbot-service:
    build:
      context: ./service/chatbot-service
      dockerfile: Dockerfile
    ports:
      - "8001:8001"
    volumes:
      - ./service/chatbot-service/app:/app/app
      - ./service/chatbot-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8001
      - PYTHONUNBUFFERED=1
    restart: always
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  materiality-service:
    build:
      context: ./service/materiality-service
      dockerfile: Dockerfile
    ports:
      - "8002:8002"
    volumes:
      - ./service/materiality-service/app:/app/app
      - ./service/materiality-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8002
      - PYTHONUNBUFFERED=1
    restart: always
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  gri-service:
    build:
      context: ./service/gri-service
      dockerfile: Dockerfile
    ports:
      - "8003:8003"
    volumes:
      - ./service/gri-service/app:/app/app
      - ./service/gri-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8003
      - PYTHONUNBUFFERED=1
    restart: always
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  grireport-service:
    build:
      context: ./service/grireport-service
      dockerfile: Dockerfile
    ports:
      - "8004:8004"
    volumes:
      - ./service/grireport-service/app:/app/app
      - ./service/grireport-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8004
      - PYTHONUNBUFFERED=1
    restart: always
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8004/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tcfd-service:
    build:
      context: ./service/tcfd-service
      dockerfile: Dockerfile
    ports:
      - "8005:8005"
    volumes:
      - ./service/tcfd-service/app:/app/app
      - ./service/tcfd-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8005
      - PYTHONUNBUFFERED=1
    restart: always
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8005/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  tcfdreport-service:
    build:
      context: ./service/tcfdreport-service
      dockerfile: Dockerfile
    ports:
      - "8006:8006"
    volumes:
      - ./service/tcfdreport-service/app:/app/app
      - ./service/tcfdreport-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8006
      - PYTHONUNBUFFERED=1
    restart: always
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8006/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  survey-service:
    build:
      context: ./service/survey-service
      dockerfile: Dockerfile
    ports:
      - "8007:8007"
    volumes:
      - ./service/survey-service/app:/app/app
      - ./service/survey-service/requirements.txt:/app/requirements.txt
    environment:
      - ENVIRONMENT=development
      - PORT=8007
      - PYTHONUNBUFFERED=1
    restart: always
    networks:
      - taeheonai-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8007/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  postgres:
    image: postgres:15-alpine
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=auth_db
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - taeheonai-network
    restart: always
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  redis:
    image: redis:7-alpine
    container_name: redis
    ports:
      - "6379:6379"
    networks:
      - taeheonai-network
    restart: always

volumes:
  postgres_data:

networks:
  taeheonai-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.25.0.0/16 